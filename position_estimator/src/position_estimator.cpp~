#include "ros/ros.h"
#include "sensor_msgs/Imu.h"
#include "custom_msgs/gnssSample.h"
#include "nav_msgs/Odometry.h"
#include "position_estimator/home.h"
#include "position_estimator/estimated_position.h"
#include "std_msgs/Float64.h"
#include "math.h"

// TODO here include the message definitions

bool is_GPS_present = false;
bool HOME = false;
const float pi = 3.1415926535;

class PosEstimNodeClass
{
	public:
		
		PosEstimNodeClass(ros::NodeHandle& node)
		{

       

			n_=node;

			//subscribers
			subFromImu_ = n_.subscribe("/mti/sensor/imu", 10, &PosEstimNodeClass::readImuMessage,this);
			subFromGPS_ = n_.subscribe("/mti/sensor/gnssPvt", 10, &PosEstimNodeClass::readGPSMessage,this);
			subFromOdo_ = n_.subscribe("/odom", 10, &PosEstimNodeClass::readOdoMessage,this);
			subFromHome_= n_.subscribe("/position_estimator/home", 10, &PosEstimNodeClass::readHomeMessage,this);
			
			// publishers
			pubEstimatedPosition_= n_.advertise<position_estimator::estimated_position>("/estimated_position", 10);	
		}

		void readImuMessage(const sensor_msgs::Imu::ConstPtr& msg)
		{
			inputImu_.orientation.w = msg->orientation.w; 
			inputImu_.orientation.x = msg->orientation.x; 
			inputImu_.orientation.y = msg->orientation.y; 
			inputImu_.orientation.z = msg->orientation.z; 
		}

		void readGPSMessage(const custom_msgs::gnssSample::ConstPtr& msg) 				
		{	
			/*  # This is a message to hold data a GNSS unit
				# Supported for MTi Devices with FW 1.4 and above.

				Header header

				float64 itow
				float64 fix

				float64 latitude
				float64 longitude
				float64 hEll
				float64 hMsl

				# ENU velocity
				geometry_msgs/Vector3 vel // float64

				float64 hAcc
				float64 vAcc
				float64 sAcc

				float64 pDop
				float64 hDop
				float64 vDop

				float64 numSat
				float64 heading
				float64 headingAcc
			*/
			inputGPS_.heading = msg->heading; 
			inputGPS_.hMsl = msg->hMsl; 
			inputGPS_.hEll = msg->hEll; 
			inputGPS_.latitude = msg->latitude;
			inputGPS_.longitude = msg->longitude;
			inputGPS_.vel.x = msg->vel.x; //East
			inputGPS_.vel.y = msg->vel.y; //North
			inputGPS_.vel.z = msg->vel.z; //Up
		
			is_GPS_present = true;
		}

		void readOdoMessage(const nav_msgs::Odometry::ConstPtr& msg) 
		{
			inputOdo_.twist.twist.linear.x = msg->twist.twist.linear.x;
			inputOdo_.twist.twist.linear.y = msg->twist.twist.linear.y;
			inputOdo_.twist.twist.linear.z = msg->twist.twist.linear.z;
			inputOdo_.twist.twist.angular.x = msg->twist.twist.angular.x;
			inputOdo_.twist.twist.angular.y = msg->twist.twist.angular.y;
			inputOdo_.twist.twist.angular.z = msg->twist.twist.angular.z;
		}

		void readHomeMessage(const position_estimator::home::ConstPtr& msg) // TODO
		{
			inputHome_.home =  msg-> home;
			if (inputHome_.home == true)
			{
				HOME = true;
			}						
		}
		
		class v_NED
		{ // this class defines a NED vector
			public:
			float N;
			float E;
			float D;
		};
		
		class v_ECEF
		{ // this class defines a NED vector
			public:
			float X;
			float Y;
			float Z;
		};
		
/*		class v_WGS84
		{// this class defins a WGS84 vector
			public:
			float64 lat
			float64 lon
			float64 alt // hEll			
		}*/  
		
		v_ECEF GPS2ECEF(custom_msgs::gnssSample P_ACTUAL_GPS)
		{
			v_ECEF P_ACTUAL_ECEF;
            float cosPhi,sinPhi,cosLambda,sinLambda,e,N;

			float a = 6378137.0;
			float b = 6356752.3142;
			float pi = 3.1415926535;
			
			cosPhi = cos(P_ACTUAL_GPS.latitude/180.0*pi);
			sinPhi = sin(P_ACTUAL_GPS.latitude/180.0*pi);
			cosLambda = cos(P_ACTUAL_GPS.longitude/180.0*pi);
			sinLambda = sin(P_ACTUAL_GPS.longitude/180.0*pi);
			e = sqrt(1.0-(pow(b,2))/(pow(a,2)));
			N = a/sqrt(1.0-pow(e,2*sinPhi)); 
			P_ACTUAL_ECEF.X = (N+P_ACTUAL_GPS.hEll)*cosPhi*cosLambda;
			P_ACTUAL_ECEF.Y = (N+P_ACTUAL_GPS.hEll)*cosPhi*sinLambda;
			P_ACTUAL_ECEF.Z = (((pow(b,2)/pow(a,2))*N+P_ACTUAL_GPS.hEll))*sinPhi;			
			
			return P_ACTUAL_ECEF;
		}
		
		v_NED GPS2NED(custom_msgs::gnssSample P_ACTUAL_GPS, custom_msgs::gnssSample P_HOME_GPS)
		{
			v_NED  P_ACTUAL_NED;
			v_ECEF P_ACTUAL_ECEF;
			v_ECEF P_HOME_ECEF;
            v_ECEF DP_ECEF;

            float cosPhi,sinPhi,cosLambda,sinLambda,t;
			
			P_HOME_ECEF = GPS2ECEF(P_HOME_GPS);
			P_ACTUAL_ECEF = GPS2ECEF(P_ACTUAL_GPS);
				
			DP_ECEF.X = P_ACTUAL_ECEF.X - P_HOME_ECEF.X;
            DP_ECEF.Y = P_ACTUAL_ECEF.Y - P_HOME_ECEF.Y; 
            DP_ECEF.Z = P_ACTUAL_ECEF.Z - P_HOME_ECEF.Z;

            
			
			cosPhi = cos(P_HOME_GPS.latitude/180.0*pi);
			sinPhi = sin(P_HOME_GPS.latitude/180.0*pi);
			cosLambda = cos(P_HOME_GPS.longitude/180.0*pi);
			sinLambda = sin(P_HOME_GPS.longitude/180.0*pi);
			t =  cosLambda* DP_ECEF.X + sinLambda* DP_ECEF.Y;
			
			P_ACTUAL_NED.N = -sinPhi * t + cosPhi * DP_ECEF.Z;
			P_ACTUAL_NED.E = -sinLambda * DP_ECEF.X + cosLambda * DP_ECEF.Y;
			P_ACTUAL_NED.D = -(cosPhi * t + sinPhi * DP_ECEF.Z);
			
			return P_ACTUAL_NED;
		}
		
		void PositionEstimation_Handle()
		{
			v_NED  hat_P_NED;
			v_NED  d_hat_P_NED;
			v_NED  P_NED_GPS;
			custom_msgs::gnssSample	P_ACTUAL_GPS;
			custom_msgs::gnssSample	P_HOME_GPS;

            float q1,q2,q3,q4,V_xB;

			// K = filter gain
			float KN = 1.0;
			float KE = 1.0;
			float KD = 1.0;
			
			// double VR;
			// double VL;
			// double V_xB;
			
			// VR, VL = right and left wheel speed
			V_xB = inputOdo_.twist.twist.linear.x; //(VR+VL)/2; // rover x-body speed

			// R_B2NED = rotation martix from body to NED	
/*			R_B2NED = [q1^2-q2^2-q3^2+q4^2 2*(q1*q2+q3*q4) 2*(q1*q3-q2*q4)
					   2*(q1*q2-q3*q4) -q1^2+q2^2-q3^2+q4^2 2*(q2*q3+q1*q4)
					   2*(q1*q3+q2*q4) 2*(q2*q3-q1*q4) -q1^2-q2^2+q3^2+q4^2];*/ //considering q4 as the scalar part of the quaternion
			q1 = inputImu_.orientation.x;
			q2 = inputImu_.orientation.y;
			q3 = inputImu_.orientation.z;
			q4 = inputImu_.orientation.w;
			
			d_hat_P_NED.N = (pow(q1,2)-pow(q2,2)-pow(q3,2)+pow(q4,2))*V_xB;
			d_hat_P_NED.E = (2*(q1*q2-q3*q4))*V_xB;
			d_hat_P_NED.D = (2*(q1*q3+q2*q4))*V_xB;
			
			if (is_GPS_present == true)
			{
				if (HOME == true)
				{
					P_HOME_GPS = inputGPS_;
					HOME = false;
				}
				P_ACTUAL_GPS = inputGPS_;
				P_NED_GPS = GPS2NED(P_ACTUAL_GPS,P_HOME_GPS);
				
				// d_hat_P_NED = R_B2NED*[V_xB; 0; 0]+K*(P_NED_GPS-hat_P_NED);
				d_hat_P_NED.N = d_hat_P_NED.N + KN*(P_NED_GPS.N-hat_P_NED.N);
				d_hat_P_NED.E = d_hat_P_NED.E + KE*(P_NED_GPS.E-hat_P_NED.E);
				d_hat_P_NED.D = d_hat_P_NED.D + KD*(P_NED_GPS.D-hat_P_NED.D);
				
				is_GPS_present = false;
			}
/*			else
			{
				// d_hat_P_NED = R_B2NED*[V_xB; 0; 0];
				d_hat_P_NED.N = (inputImu_.q1^2-inputImu_.q2^2-inputImu_.q3^2+inputImu_.q4^2)*V_xB;
				d_hat_P_NED.E = (2*(inputImu_.q1*inputImu_.q2-inputImu_.q3*inputImu_.q4))*V_xB;
				d_hat_P_NED.D = (2*(inputImu_.q1*inputImu_.q3+inputImu_.q2*inputImu_.q4))*V_xB;
			}*/

			hat_P_NED.N = d_hat_P_NED.N*DT+hat_P_NED.N; 
			hat_P_NED.E = d_hat_P_NED.E*DT+hat_P_NED.E; 
            hat_P_NED.D = d_hat_P_NED.D*DT+hat_P_NED.D; 

			outputEstimatedPosition_.N = hat_P_NED.N;
			outputEstimatedPosition_.E = hat_P_NED.E;
			outputEstimatedPosition_.D = hat_P_NED.D;
			// Publish the estimated position
			pubEstimatedPosition_.publish(outputEstimatedPosition_);
		}

		void run()
		{
			ros::Rate loop_rate(rate);

			while (ros::ok())
			{
				ROS_INFO_ONCE("Position_Estimator: RUNNING");

				PositionEstimation_Handle();
				ros::spinOnce();
				loop_rate.sleep();
			}
		}

	protected:
		/*state here*/
		ros::NodeHandle n_;

		// Subscribers
		ros::Subscriber subFromImu_;
		sensor_msgs::Imu inputImu_;
		
		ros::Subscriber subFromGPS_;
		custom_msgs::gnssSample inputGPS_;

		ros::Subscriber subFromOdo_;
		nav_msgs::Odometry inputOdo_;

		ros::Subscriber subFromHome_;
		position_estimator::home inputHome_;	
		
		// Publishers
		ros::Publisher pubToAckMission_;
        ros::Publisher pubEstimatedPosition_;
		position_estimator::estimated_position outputEstimatedPosition_;

    
        //why float64??         
		float rate = 10.0;
		float DT = 1.0/(rate);

	private:
};

int main(int argc, char **argv)
{
	ros::init(argc, argv, "position_estimator");
	ros::NodeHandle node;

	PosEstimNodeClass PosEstimNode(node);

	PosEstimNode.run();
	return 0;
}
